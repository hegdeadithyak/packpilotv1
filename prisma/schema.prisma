generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  role      Role     @relation(fields: [roleId], references: [id])
  authMeta  Json?    @map("auth_meta")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  orderDecisions       OrderDecision[]
  orderStatusChanges   OrderStatusHistory[]
  notifications        Notification[]
  approvalGroupMembers ApprovalGroupMember[]
  roleId               String

  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions Json
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  users User[]

  @@map("roles")
}

model RetailShop {
  id                String   @id @default(cuid()) @map("shop_id")
  name              String
  address           String
  geoLocation       Json     @map("geo_location")
  linkedWarehouseId String?  @map("linked_warehouse_id")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  linkedWarehouse Warehouse?      @relation(fields: [linkedWarehouseId], references: [id])
  shortageAlerts  ShortageAlert[]
  orderRequests   OrderRequest[]
  shipments       Shipment[]
  routeStops      RouteStop[]

  @@map("retail_shops")
}

model Warehouse {
  id          String   @id @default(cuid()) @map("warehouse_id")
  name        String
  address     String
  geoLocation Json     @map("geo_location")
  truckId     String?  @map("truck_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  retailShops      RetailShop[]
  inventoryRecords InventoryRecord[]
  orderRequests    OrderRequest[]
  shipments        Shipment[]
  locationUpdates  LocationUpdate[]

  @@map("warehouses")
}

model Item {
  id                       String   @id @default(cuid()) @map("item_id")
  name                     String
  sku                      String   @unique
  unit                     String
  baselineReorderThreshold Int      @map("baseline_reorder_threshold")
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @updatedAt @map("updated_at")

  // Relations
  inventoryRecords      InventoryRecord[]
  shortageAlerts        ShortageAlert[]
  inventoryReservations InventoryReservation[]
  fulfillments          Fulfillment[]
  stockMovements        StockMovementHistory[]

  @@map("items")
}

model InventoryRecord {
  id            String   @id @default(cuid()) @map("inventory_id")
  warehouseId   String   @map("warehouse_id")
  itemId        String   @map("item_id")
  currentStock  Int      @map("current_stock")
  reservedStock Int      @map("reserved_stock")
  lastUpdated   DateTime @default(now()) @map("last_updated")

  // Relations
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  item      Item      @relation(fields: [itemId], references: [id])

  @@unique([warehouseId, itemId])
  @@map("inventory_records")
}

model ShortageAlert {
  id           String   @id @default(cuid()) @map("alert_id")
  itemId       String   @map("item_id")
  shopId       String   @map("shop_id")
  triggeredAt  DateTime @default(now()) @map("triggered_at")
  alertData    Json     @map("alert_data")
  severity     Severity
  resolvedFlag Boolean  @default(false) @map("resolved_flag")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  item          Item           @relation(fields: [itemId], references: [id])
  shop          RetailShop     @relation(fields: [shopId], references: [id])
  orderRequests OrderRequest[]

  @@map("shortage_alerts")
}

model OrderRequest {
  id            String      @id @default(cuid()) @map("order_id")
  shopId        String      @map("shop_id")
  warehouseId   String      @map("warehouse_id")
  createdAt     DateTime    @default(now()) @map("created_at")
  totalQuantity Int         @map("total_quantity")
  status        OrderStatus
  priority      Priority
  sourceAlertId String?     @map("source_alert_id")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  // Relations
  shop                  RetailShop             @relation(fields: [shopId], references: [id])
  warehouse             Warehouse              @relation(fields: [warehouseId], references: [id])
  sourceAlert           ShortageAlert?         @relation(fields: [sourceAlertId], references: [id])
  orderDecisions        OrderDecision[]
  orderApprovalHolds    OrderApprovalHold[]
  inventoryReservations InventoryReservation[]
  fulfillments          Fulfillment[]
  statusHistory         OrderStatusHistory[]
  stockMovements        StockMovementHistory[]

  @@map("order_requests")
}

model OrderDecision {
  id                String       @id @default(cuid()) @map("decision_id")
  orderId           String       @map("order_id")
  deciderUserId     String       @map("decider_user_id")
  decisionType      DecisionType @map("decision_type")
  decisionReason    String       @map("decision_reason")
  decisionTimestamp DateTime     @default(now()) @map("decision_timestamp")

  // Relations
  order   OrderRequest @relation(fields: [orderId], references: [id])
  decider User         @relation(fields: [deciderUserId], references: [id])

  @@map("order_decisions")
}

model ApprovalGroup {
  id        String   @id @default(cuid()) @map("group_id")
  name      String   @unique
  rules     Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  members            ApprovalGroupMember[]
  orderApprovalHolds OrderApprovalHold[]

  @@map("approval_groups")
}

model ApprovalGroupMember {
  id              String   @id @default(cuid())
  approvalGroupId String   @map("approval_group_id")
  userId          String   @map("user_id")
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  approvalGroup ApprovalGroup @relation(fields: [approvalGroupId], references: [id])
  user          User          @relation(fields: [userId], references: [id])

  @@unique([approvalGroupId, userId])
  @@map("approval_group_members")
}

model OrderApprovalHold {
  id                String        @id @default(cuid()) @map("hold_id")
  orderId           String        @map("order_id")
  violationRule     String        @map("violation_rule")
  createdAt         DateTime      @default(now()) @map("created_at")
  requiredApprovers String[]      @map("required_approvers")
  currentState      ApprovalState @map("current_state")
  approvalGroupId   String?       @map("approval_group_id")

  // Relations
  order         OrderRequest   @relation(fields: [orderId], references: [id])
  approvalGroup ApprovalGroup? @relation(fields: [approvalGroupId], references: [id])

  @@map("order_approval_holds")
}

model InventoryReservation {
  id               String   @id @default(cuid()) @map("reservation_id")
  orderId          String   @map("order_id")
  itemId           String   @map("item_id")
  quantityReserved Int      @map("quantity_reserved")
  reservedAt       DateTime @default(now()) @map("reserved_at")
  expiresAt        DateTime @map("expires_at")

  // Relations
  order OrderRequest @relation(fields: [orderId], references: [id])
  item  Item         @relation(fields: [itemId], references: [id])

  @@map("inventory_reservations")
}

model Fulfillment {
  id              String   @id @default(cuid()) @map("fulfillment_id")
  orderId         String   @map("order_id")
  itemId          String   @map("item_id")
  quantityShipped Int      @map("quantity_shipped")
  shippedAt       DateTime @default(now()) @map("shipped_at")
  shipmentId      String   @map("shipment_id")

  // Relations
  order    OrderRequest @relation(fields: [orderId], references: [id])
  item     Item         @relation(fields: [itemId], references: [id])
  shipment Shipment     @relation(fields: [shipmentId], references: [id])

  @@map("fulfillments")
}

model Shipment {
  id                String         @id @default(cuid()) @map("shipment_id")
  originWarehouseId String         @map("origin_warehouse_id")
  destinationShopId String         @map("destination_shop_id")
  createdAt         DateTime       @default(now()) @map("created_at")
  expectedArrival   DateTime?      @map("expected_arrival")
  status            ShipmentStatus
  updatedAt         DateTime       @updatedAt @map("updated_at")

  // Relations
  originWarehouse Warehouse     @relation(fields: [originWarehouseId], references: [id])
  destinationShop RetailShop    @relation(fields: [destinationShopId], references: [id])
  fulfillments    Fulfillment[]
  routeStops      RouteStop[]

  @@map("shipments")
}

model RouteStop {
  id            String          @id @default(cuid()) @map("route_id")
  shipmentId    String          @map("shipment_id")
  stopNumber    Int             @map("stop_number")
  shopId        String          @map("shop_id")
  eta           DateTime?
  actualArrival DateTime?       @map("actual_arrival")
  status        RouteStopStatus

  // Relations
  shipment Shipment   @relation(fields: [shipmentId], references: [id])
  shop     RetailShop @relation(fields: [shopId], references: [id])

  @@unique([shipmentId, stopNumber])
  @@map("route_stops")
}

model LocationUpdate {
  id             String   @id @default(cuid()) @map("update_id")
  warehouseId    String   @map("warehouse_id")
  truckId        String?  @map("truck_id")
  statusMessage  String   @map("status_message")
  simulationDate DateTime @map("simulation_date")
  geoLocation    Json     @map("geo_location")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])

  @@map("location_updates")
}

model Notification {
  id            String           @id @default(cuid()) @map("notification_id")
  targetUserId  String           @map("target_user_id")
  relatedEntity String           @map("related_entity")
  type          NotificationType
  payload       Json
  createdAt     DateTime         @default(now()) @map("created_at")
  readFlag      Boolean          @default(false) @map("read_flag")

  // Relations
  targetUser User @relation(fields: [targetUserId], references: [id])

  @@map("notifications")
}

model StockMovementHistory {
  id                 String       @id @default(cuid()) @map("movement_id")
  itemId             String       @map("item_id")
  fromLocation       String       @map("from_location")
  toLocation         String       @map("to_location")
  quantity           Int
  movementType       MovementType @map("movement_type")
  timestamp          DateTime     @default(now())
  triggeredByOrderId String?      @map("triggered_by_order_id")

  // Relations
  item             Item          @relation(fields: [itemId], references: [id])
  triggeredByOrder OrderRequest? @relation(fields: [triggeredByOrderId], references: [id])

  @@map("stock_movement_history")
}

model OrderStatusHistory {
  id              String      @id @default(cuid()) @map("history_id")
  orderId         String      @map("order_id")
  previousStatus  OrderStatus @map("previous_status")
  newStatus       OrderStatus @map("new_status")
  changedAt       DateTime    @default(now()) @map("changed_at")
  changedByUserId String      @map("changed_by_user_id")
  comment         String?

  // Relations
  order     OrderRequest @relation(fields: [orderId], references: [id])
  changedBy User         @relation(fields: [changedByUserId], references: [id])

  @@map("order_status_history")
}

// Enums
enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum OrderStatus {
  PENDING
  APPROVED
  REJECTED
  PARTIAL
  BACKORDERED
  FULFILLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum DecisionType {
  ACCEPT
  REJECT
  MODIFY
}

enum ApprovalState {
  PENDING
  APPROVED
  REJECTED
  ESCALATED
}

enum ShipmentStatus {
  CREATED
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum RouteStopStatus {
  PENDING
  EN_ROUTE
  ARRIVED
  COMPLETED
}

enum NotificationType {
  SHORTAGE_ALERT
  ORDER_CREATED
  ORDER_APPROVED
  ORDER_REJECTED
  SHIPMENT_UPDATE
  DELIVERY_COMPLETE
}

enum MovementType {
  INBOUND
  OUTBOUND
  TRANSFER
  ADJUSTMENT
  RESERVATION
  RELEASE
}
